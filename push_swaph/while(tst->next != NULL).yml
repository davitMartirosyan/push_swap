//     while(tst->next != NULL)
//     {
//         ft_printf("%d ", tst->n);
//         tst = tst->next;
//     }



//         // action.sa(&a, a, a->next);
//     while(a->next != NULL)
//     {
//         ft_printf("%d\n", a->n);
//         a = a->next;
//     }

//         while(t1->next != NULL)
//     {
//         ft_printf("%d\n", t1->n);
//         t1 = t1->next;
//     }
//     ft_printf("____________________\n");
//     while(t2->next != NULL)
//     {
//         ft_printf("%d\n", t2->n);
//         t2 = t2->next;
//     }

//     void get_ints(char **av, Stack *a)
// {
//     int i;
//     int index;
//     Stack *tmp;
    
//     i = 1;
//     index = 0;
//     tmp = a;
//     while(av[i])
//     {
//         tmp->n = ft_atoi(av[i]);
//         tmp->index = index;
//         tmp->next = (Stack *)malloc(sizeof(*tmp));
//         tmp = tmp->next;
//         i++;
//         index++;
//     }
//     tmp->next = NULL;
// }

//  while(a->next != NULL)
//     {
//         ft_printf("%d\n", a->n);
//         a = a->next;
//     }


// void store(Stack *a, t_important *data)
// {
//     int i;
//     char **collection_of_ints;
//     Stack *tmp;

//     tmp = a;
//     collection_of_ints = ft_split(data->collection, ' ');
//     i = 0;
//     while(collection_of_ints[i])
//     {
//         tmp->n = ft_atoi(collection_of_ints[i]);
//         tmp->index = i;
//         tmp->next = malloc(sizeof(*tmp));
//         tmp = tmp->next;
//         i++;
//     }
//     tmp->next = NULL;
// }


    // action.sa(a, (*a)->next);                        // OK
    // action.sb(a, (*a)->next);                        // OK
    // action.ss(a, (*a)->next, b, (*b)->next);         // OK
    // action.pb(a, b);                                 // OK
// raddix(&a, &b, data, action);

// action.pb(a, b);
//    action.pb(a, b);
//    action.pb(a, b);
//    action.rrr(a, b);
//    while((*a) != NULL)
//    {
//        ft_printf("%d ", (*a)->n);
//        *a = (*a)->next;
//    }
//     ft_printf("\n");
//    while((*b) != NULL)
//    {
//        ft_printf("%d ", (*b)->n);
//        *b = (*b)->next;
//    }

if(data->length == 3)
        tripple(*a);
    else if(data->length == 5)
        pentan(a, b);
    else if(data->length <= 100)
        chuncks = data->length / 5;
    else if(data->length <= 500)
        chuncks = data->length / 11;

        //Butterfly structure in Stack B
    // b_fly(a, b, data, action);


    if(data->length == 2)
    {
        if((*a)->n > (*a)->next->n)
        action.ra(a);
    }
    else if(data->length == 3)
        tripple(a);
    else if(data->length == 4)
        quadruple(a, b);
    else if(data->length == 5)
        quintuple(a, b);
    else if(data->length > 5 && data->length <= 100)
        centuple(a, b, data);




if(tmp->n == mx)
        {
            int step = 0;
            if(tmp->idx <= (mlen / 2))
            {
                while(step < tmp->idx)
                {  
                    action.rb(&tmp);
                    step++;
                }
                action.pa(a, &tmp);
                tmp = *b;
            }
            else if(tmp->idx > (mlen / 2))
            {
                while(step < (mlen - tmp->idx))
                {
                    action.rrb(&tmp);
                    step++;
                }
                action.pa(a, &tmp);
                tmp = *b;
            }
            mx--;
        }


            
    // while(*b != NULL)
    // {
    //     ft_printf("%d", (*b)->n);
    //     (*b) = (*b)->next;
    // }
    // action.rrb(b);
    // ft_printf("%d", (*b)->n);